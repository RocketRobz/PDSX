#include "psonemenu.h"

#include "bg_grid.h"

static bool oneMenu_bgLoaded = false;
static bool oneMusicStopped = false;
static bool oneDisplayMenuGraphics = false;
static int oneMenu_cursor = 0;
static bool oneMenu_textFade = false;

static int oneMenu_textFadeColor = 255;	// 0 when faded out

extern int psConsoleModel;					// 0 = Playstation -> PS, 1 = PSone

extern int pressed;

extern int blueBgTexID, gridBgTexID;
extern glImage gridBgImage[(256 / 16) * (192 / 16)];
extern glImage memCardImage[(64 / 16) * (64 / 16)];
extern glImage cdImage[(64 / 16) * (64 / 16)];
extern glImage menuCursorImage[(16 / 16) * (32 / 16)];

extern void drawBG(glImage *images);

void psoneMenuInit(void) {
	if (psConsoleModel == 1) {
		if (!oneMenu_bgLoaded) {
			glDeleteTextures(1, &blueBgTexID);
			gridBgTexID = glLoadTileSet(gridBgImage, // pointer to glImage array
									16, // sprite width
									16, // sprite height
									256, // bitmap width
									256, // bitmap height
									GL_RGB256, // texture type for glTexImage2D() in videoGL.h
									TEXTURE_SIZE_256, // sizeX for glTexImage2D() in videoGL.h
									TEXTURE_SIZE_256, // sizeY for glTexImage2D() in videoGL.h
									GL_TEXTURE_WRAP_S | GL_TEXTURE_WRAP_T | TEXGEN_OFF, // param for glTexImage2D() in videoGL.h
									217, // Length of the palette to use (217 colors)
									(u16*) bg_gridPal, // Load our 217 color tiles palette
									(u8*) bg_gridBitmap // image data generated by GRIT
									);
			oneMenu_bgLoaded = true;
		}
	} else {
		oneMenu_bgLoaded = false;
	}

	oneMusicStopped = false;
	oneDisplayMenuGraphics = false;
	oneMenu_cursor = 0;
	oneMenu_textFade = false;

	oneMenu_textFadeColor = 255;
}

void psoneMenu(void) {
	if (!oneMusicStopped) {
		mmEffectCancelAll();	// Stop SPE logo music
		for (int i = 0; i < 30; i++) {
			swiWaitForVBlank();
		}
		oneMusicStopped = true;
	}

	oneDisplayMenuGraphics = true;

	if (oneMenu_textFade) {
		oneMenu_textFadeColor -= 10;
		if (oneMenu_textFadeColor < 0) {
			oneMenu_textFadeColor = 255;
			oneMenu_textFade = false;
		}
	} else {
		if (pressed & KEY_LEFT) {
			oneMenu_cursor--;
			if (oneMenu_cursor < 0) oneMenu_cursor = 0;
		}

		if (pressed & KEY_RIGHT) {
			oneMenu_cursor++;
			if (oneMenu_cursor > 1) oneMenu_cursor = 1;
		}

		if (pressed & KEY_A) {
			oneMenu_textFade = true;
		}
	}

	swiWaitForVBlank();
}

void psoneMenuGraphicDisplay(void) {
	drawBG(gridBgImage);
	if (oneDisplayMenuGraphics) {
		if (oneMenu_cursor == 0) glColor(RGB15(oneMenu_textFadeColor/8, oneMenu_textFadeColor/8, oneMenu_textFadeColor/8));
		glSprite(64, 84, GL_FLIP_NONE, memCardImage);
		glColor(RGB15(31, 31, 31));
		if (oneMenu_cursor == 1) glColor(RGB15(oneMenu_textFadeColor/8, oneMenu_textFadeColor/8, oneMenu_textFadeColor/8));
		glSprite(154, 83, GL_FLIP_NONE, cdImage);
		glColor(RGB15(31, 31, 31));
		if (oneMenu_cursor == 0) {
			if (!oneMenu_textFade) glSprite(82, 132, GL_FLIP_NONE, &menuCursorImage[1]);
		} else {
			if (!oneMenu_textFade) glSprite(178, 132, GL_FLIP_NONE, &menuCursorImage[1]);
		}
	}
	glColor(RGB15(31, 31, 31));
}